// Copyright (c) 2017 Christian Funkhouser <christian.funkhouser@gmail.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package preppi

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"path"
	"sort"
	"text/template"

	"github.com/spf13/afero"
)

// All recipes have the same steps (for now):
// - Gather all ingredients, assembling a list of all needed variables
// - Populate a RecipeData struct with the provded variable values
// - For each ingredient Source file
//   - Create a text/template.Template
//   - Execute the template, save output to Destination
// - Assuming success, populate a Mapper. Marshall JSON to preppi.conf.

// RecipeData is a data structure used to execute templates when generating
// files for the recipe.
type RecipeData struct {
	Vars map[string]string
}

type Ingredient struct {
	Source      string      `json:"source"`
	Destination string      `json:"destination"`
	Mode        os.FileMode `json:"mode"`
	DirMode     os.FileMode `json:"dirmode"`
	UID         int         `json:"uid"`
	GID         int         `json:"gid"`
	Clobber     bool        `json:"clobber,omitempty"`
	Vars        []string    `json:"vars"`
}

func (i *Ingredient) Prepare(srcRoot, destRoot string, d *RecipeData) error {
	src, err := preppiFS.Open(path.Join(srcRoot, i.Source))
	if err != nil {
		return err
	}
	tmplData, err := ioutil.ReadAll(src)
	if err != nil {
		return err
	}
	src.Close()

	tmpl, err := i.compileTemplate(string(tmplData))
	if err != nil {
		return err
	}

	dst, err := preppiFS.Create(path.Join(destRoot, i.Source))
	if err != nil {
		return err
	}
	defer dst.Close()

	if err := tmpl.Execute(dst, d); err != nil {
		return err
	}
	return nil
}

func (i *Ingredient) Mapping() *Mapping {
	return &Mapping{
		Source:      i.Source,
		Destination: i.Destination,
		Mode:        i.Mode,
		DirMode:     i.DirMode,
		UID:         i.UID,
		GID:         i.GID,
		Clobber:     i.Clobber,
	}
}

func (i *Ingredient) compileTemplate(tmplData string) (*template.Template, error) {
	t := template.New(i.Source)
	tmpl, err := t.Parse(tmplData)
	if err != nil {
		return nil, err
	}
	return tmpl, nil
}

// GeneratedByPrepPi returns a string of the format:
// "Generated by PrepPi $VERSION ($BUILD_ID)"
func (r *RecipeData) GeneratedByPrepPi() string {
	return fmt.Sprintf("Generated by %v", VersionString())
}

type Recipe struct {
	Name        string        `json:"name"`
	Ingredients []*Ingredient `json:"ingredients"`

	// root is the path to the directory in which the recipe file exists.
	// All ingredient file paths will be interpreted relative to this.
	root string
}

func (r *Recipe) Bake(dest string, d *RecipeData) error {
	m := make([]*Mapping, 0)
	for _, i := range r.Ingredients {
		if err := i.Prepare(r.root, dest, d); err != nil {
			// Stop at the first error
			return err
		}
		m = append(m, i.Mapping())
	}
	if err := MapperToFile(path.Join(dest, "preppi.conf"), &Mapper{Mappings: m}); err != nil {
		return err
	}
	return nil
}

// Vars accumulates the variables expected for each ingredient.
func (r *Recipe) Vars() []string {
	varMap := make(map[string]bool)
	for _, i := range r.Ingredients {
		for _, v := range i.Vars {
			varMap[v] = true
		}
	}
	vars := make([]string, 0)
	for i := range varMap {
		vars = append(vars, i)
	}
	// Deterministic output is nice.
	sort.Strings(vars)
	return vars
}

// RecipeFromFile reads a config and returns a Mapper
func RecipeFromFile(path string) (*Recipe, error) {
	data, err := afero.ReadFile(preppiFS, path)
	if err != nil {
		return nil, fmt.Errorf("failed reading recipe %q: %v", path, err)
	}
	r := &Recipe{}
	if err := json.Unmarshal(data, r); err != nil {
		return nil, fmt.Errorf("failed reading recipe %q: %v", path, err)
	}
	return r, nil
}
